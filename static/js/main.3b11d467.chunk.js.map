{"version":3,"sources":["img/univelcity-logo-green.svg","actions/authActions.js","utils/setAuthToken.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/index.js","actions/types.js","store.js","components/common/Univelcity.js","components/auth/Register.js","components/auth/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","history","setAuthToken","token","axios","defaults","headers","common","isEmpty","require","initialState","isAuthenticated","user","loading","combineReducers","auth","state","action","type","payload","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","setCurrentUser","decoded","Univelcity","className","src","logo","alt","Register","onChange","e","setState","target","id","value","onSubmit","preventDefault","newUser","name","email","password","password2","props","registerUser","this","push","nextProps","noValidate","error","to","Component","connect","userData","dispatch","post","then","res","catch","err","response","data","withRouter","Login","loginUser","emailnotfound","passwordincorrect","localStorage","setItem","JSON","stringify","jwt_decode","jwtTokenTeams","parse","currentTime","Date","now","exp","removeItem","location","href","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b11d467.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/univelcity-logo-green.59a017e0.svg\";","import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"/api/users/login\", userData)\n    .then(res => {\n      // Save to localStorage\n\n      // Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtTokenTeams\", JSON.stringify(token));\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n// Log user out\nexport const logoutUser = history => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtTokenTeams\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n\n  history.push(\"/dashboard\");\n};\n","import axios from \"axios\";\n\nconst setAuthToken = token => {\n  if (token) {\n    // Apply authorization token to every request if logged in\n    axios.defaults.headers.common[\"Authorization\"] = token;\n  } else {\n    // Delete auth header\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n};\n\nexport default setAuthToken;\n","import { SET_CURRENT_USER, USER_LOADING } from \"../actions/types\";\n\nconst isEmpty = require(\"is-empty\");\n\nconst initialState = {\n  isAuthenticated: false,\n  user: {},\n  loading: false\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return {\n        ...state,\n        isAuthenticated: !isEmpty(action.payload),\n        user: action.payload\n      };\n    case USER_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    default:\n      return state;\n  }\n}\n","import { GET_ERRORS } from \"../actions/types\";\n\nconst initialState = {};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_ERRORS:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport authReducer from \"./authReducer\";\nimport errorReducer from \"./errorReducer\";\n\nexport default combineReducers({\n  auth: authReducer,\n  errors: errorReducer\n});\n","// Authentication\nexport const GET_ERRORS = \"GET_ERRORS\";\nexport const USER_LOADING = \"USER_LOADING\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    (window.__REDUX_DEVTOOLS_EXTENSION__ &&\n      window.__REDUX_DEVTOOLS_EXTENSION__()) ||\n      compose\n  )\n);\n\nexport default store;\n","import React from 'react'\r\nimport logo from \"../../img/univelcity-logo-green.svg\";\r\nimport \"./Univelcity.scss\";\r\n\r\nconst Univelcity = () => {\r\n  return (\r\n    <div className=\"logo\">\r\n      <img className=\"center\" src={logo} alt=\"Logo\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Univelcity;\r\n","import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { registerUser } from \"../../actions/authActions\";\n\nimport \"./Auth.scss\";\nimport Univelcity from '../common/Univelcity';\n\nclass Register extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      password2: \"\",\n      errors: {}\n    };\n  }\n\n  componentDidMount() {\n    // If logged in and user navigates to Register page, should redirect them to dashboard\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/dashboard\");\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n\n    const newUser = {\n      name: this.state.name,\n      email: this.state.email,\n      password: this.state.password,\n      password2: this.state.password2\n    };\n\n    this.props.registerUser(newUser, this.props.history);\n  };\n\n  render() {\n    const { errors } = this.state;\n\n    return (\n      <div className=\"base-wrapper\">\n      <Univelcity />\n        <div className=\"auth-header\">Register your account</div>\n        <form className=\"auth-form\" noValidate onSubmit={this.onSubmit}>\n          <div className=\"auth-group\">\n            <label>\n              <div className=\"auth-label\">Full Name</div>\n              <input\n                onChange={this.onChange}\n                value={this.state.name}\n                error={errors.name}\n                id=\"name\"\n                type=\"text\"\n                className=\"auth-input\"\n              />\n              <div className=\"auth-error\">{errors.name}</div>\n            </label>\n          </div>\n\n          <div className=\"auth-group\">\n            <label>\n              <div className=\"auth-label\">Email address</div>\n              <input\n                onChange={this.onChange}\n                value={this.state.email}\n                error={errors.email}\n                id=\"email\"\n                type=\"email\"\n                className=\"auth-input\"\n              />\n              <div className=\"auth-error\">{errors.email}</div>\n            </label>\n          </div>\n\n          <div className=\"auth-group\">\n            <label>\n              <div className=\"auth-label\">Password</div>\n              <input\n                onChange={this.onChange}\n                value={this.state.password}\n                error={errors.password}\n                id=\"password\"\n                type=\"password\"\n                className=\"auth-input\"\n              />\n              <div className=\"auth-error\">{errors.password}</div>\n            </label>\n          </div>\n\n          <div className=\"auth-group\">\n            <label>\n              <div className=\"auth-label\">Confirm Password</div>\n              <input\n                onChange={this.onChange}\n                value={this.state.password2}\n                error={errors.password2}\n                id=\"password2\"\n                type=\"password\"\n                className=\"auth-input\"\n              />\n              <div className=\"auth-error\">{errors.password2}</div>\n            </label>\n          </div>\n\n\n          <div>\n            <button type=\"submit\" className=\"auth-button\">\n              Sign up\n            </button>\n          </div>\n          <div className=\"bottom-group\">\n            <p>Already have an account,\n              <Link to=\"/\" className=\"link\">\n                Login\n              </Link>\n            </p>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nRegister.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(\n  mapStateToProps,\n  { registerUser }\n)(withRouter(Register));\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { loginUser } from \"../../actions/authActions\";\n\nimport \"./Auth.scss\";\n\nimport Univelcity from '../common/Univelcity';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      email: \"\",\n      password: \"\",\n      errors: {}\n    };\n  }\n\n  componentDidMount() {\n    // If logged in and user navigates to Login page, should redirect them to dashboard\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/dashboard\");\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.auth.isAuthenticated) {\n      this.props.history.push(\"/dashboard\");\n    }\n\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n\n    const userData = {\n      email: this.state.email,\n      password: this.state.password\n    };\n\n    this.props.loginUser(userData);\n  };\n\n/*   fillDemoEmail = () => {\n    this.setState({ email: \"admin@univelcity.com\" });\n  };\n\n  fillDemoPassword = () => {\n    this.setState({ password: \"test1234\" });\n  };\n */\n  render() {\n    const { errors } = this.state;\n\n    return (\n      <div className=\"base-wrapper\">\n        <Univelcity />\n        <div className=\"auth-header\">Login to your account</div>\n        <form className=\"auth-form\" noValidate onSubmit={this.onSubmit}>\n          <div className=\"auth-group\">\n            <label>\n              <div className=\"auth-label\">Email address</div>\n              <input\n                onChange={this.onChange}\n                value={this.state.email}\n                error={errors.email}\n                id=\"email\"\n                type=\"email\"\n                className=\"auth-input\"\n              />\n              <div className=\"auth-error\">\n                {errors.email}\n                {errors.emailnotfound}\n              </div>\n            </label>\n          </div>\n\n          <div className=\"auth-group\">\n            <label>\n              <div className=\"auth-label\">Password</div>\n              <input\n                onChange={this.onChange}\n                value={this.state.password}\n                error={errors.password}\n                id=\"password\"\n                type=\"password\"\n                className=\"auth-input\"\n              />\n              <div className=\"auth-error\">\n                {errors.password}\n                {errors.passwordincorrect}\n              </div>\n            </label>\n          </div>\n\n          <div>\n            <button type=\"submit\" className=\"auth-button\">\n              Login\n            </button>\n          </div>\n          <div className=\"bottom-group\">\n          <p>Don't have an account,</p>\n            <Link to=\"/register\" className=\"link\">\n              Sign up\n            </Link>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  loginUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(\n  mapStateToProps,\n  { loginUser }\n)(Login);\n","// React\nimport React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n// Utils\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"./utils/setAuthToken\";\n\n// Redux\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\n\n// Components\nimport Register from \"./components/auth/Register\";\nimport Login from \"./components/auth/Login\";\n//import PrivateRoute from \"./components/private-route/PrivateRoute\";\n//import NotFound from \"./components/404/404\";\n\n// Style\nimport \"./App.scss\";\n\n// Check for token to keep user logged in\nif (localStorage.jwtTokenTeams) {\n  // Set auth token header auth\n  const token = JSON.parse(localStorage.jwtTokenTeams);\n  setAuthToken(token);\n\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token);\n\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded));\n\n  // Check for expired token\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n\n    // Redirect to login\n    window.location.href = \"/\";\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"App\">\n            <Switch>\n              <Route exact path=\"/\" component={Login} />\n              <Route exact path=\"/register\" component={Register} />\n            </Switch>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType !==null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}